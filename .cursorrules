{
  "description": "Rules for Everything Immersive project",
  "prompts": {
    "default": "You are assisting with a Laravel + Vue.js project for an events platform called Everything Immersive. Follow these guidelines:\n\n- Keep responses focused on specific code changes needed, not entire files\n- Use Vue 3 Composition API with <script setup> syntax\n- Follow kebab-case for component file names\n- Use Tailwind CSS for styling\n- Prefer component events (@emit) over global events for direct parent-child communication\n- Use window.dispatchEvent for cross-component communication\n- Mobile-first responsive design with Tailwind breakpoints\n- Implement detailed inline documentation for complex logic\n- Use v-click-outside directive for dropdown handling\n- Format dates with toLocaleDateString when displaying them\n- Use searchParams and URLSearchParams for URL parameter handling\n- Keep Vue template code clean with computed properties for complex conditionals\n- Use defineEmits() and defineProps() in Vue components\n- Error handling should include both user-friendly messages and detailed console logging\n- When suggesting browser APIs, ensure cross-browser compatibility. Also please only suggest using a watcher() in vue if its absolutely necessary."
  },
  "settings": {
    "javascript.preferConstOverLet": true,
    "vue.useCompositionApi": true,
    "tailwind.useCustomClasses": true,
    "linting.preferEslint": true,
    "code.formatOnSave": true,
    "response.focusOnChanges": true,
    "suggestions.includeFrameworkContext": true
  },
  "snippets": {
    "vue-component": "```vue\n<template>\n  <div class=\"\">\n    <!-- Component content -->\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\n\n// Props and emits\nconst props = defineProps({\n  // Define props here\n});\n\nconst emit = defineEmits([\n  // Define emits here\n]);\n\n// Reactive state\nconst state = ref(null);\n\n// Computed properties\nconst derivedValue = computed(() => {\n  // Compute value based on state\n});\n\n// Methods\nconst handleAction = () => {\n  // Handle action\n};\n\n// Lifecycle hooks\nonMounted(() => {\n  // Component mounted logic\n});\n</script>\n```",
    "tailwind-responsive": "```html\n<div class=\"w-full md:w-auto lg:w-[50%]\">\n  <!-- Responsive content -->\n</div>\n```",
    "vue-event-handler": "```javascript\n// In child component\nconst emit = defineEmits(['update:event']);\n\nconst handleEvent = () => {\n  emit('update:event', { /* event data */ });\n};\n\n// In parent template\n<ChildComponent @update:event=\"handleEventUpdate\" />\n```"
  }
}
